{"version":3,"sources":["components/Fire.js","components/Guilds.js","components/LoggedIn.js","components/LoggedOut.js","components/Directory.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","Guilds","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkUserLoggedIn","bind","assertThisInitialized","state","userLoggedIn","_this2","Fire","auth","onAuthStateChanged","user","setState","react_default","a","createElement","Col","sm","Card","body","inverse","className","style","backgroundColor","borderColor","CardBody","CardTitle","guildFaction","guildName","CardSubtitle","guildRegion","guildServer","CardText","guildDesc","Button","React","Component","LoggedIn","logout","toggleProfile","updateUsername","setUserProfile","deleteUserProfile","handleChange","getUserInfo","getUserEmail","toggleAddGuild","toggleManageGuild","toggleDeleteModal","addGuildToDB","toggleRegionSelect","toggleFactionSelect","setEditDisabled","setRegionEU","setRegionUS","setFactionA","setFactionH","checkGuildData","ucFirst","getGuildInfo","profileModal","addGuildModal","manageGuildModal","deleteModal","editDisabled","profileUsername","profileEmail","profileDiscord","profileUid","guildNameError","guildRegionError","guildServerError","guildDescError","guildFactionError","factionColor","regionSelect","factionSelect","userHasGuild","signOut","value","e","defineProperty","target","name","s","charAt","toUpperCase","slice","prevState","successfulGuildLog","length","userUid","currentUser","uid","email","firestore","collection","doc","get","then","exists","data","JSON","stringify","parse","username","console","log","_this3","discord","catch","err","_this4","guild","set","delete","_this5","_this6","NavItem","NavLink","href","onClick","Modal","isOpen","toggle","ModalBody","Form","FormGroup","Label","color","for","Input","type","onChange","disabled","FormText","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","defaultValue","InputGroup","InputGroupAddon","addonType","InputGroupText","Badge","placeholder","InputGroupButtonDropdown","divider","ModalFooter","LoggedOut","login","signup","toggleLoginModal","toggleRegisterModal","checkPlayerData","getUsernames","loginModal","registerModal","dbUsernames","usernameError","discordError","emailError","password","passwordError","signInWithEmailAndPassword","u","error","createUserWithEmailAndPassword","snapshot","forEach","push","Directory","toggleNav","authListener","Navbar","dark","expand","sticky","NavbarToggler","Collapse","navbar","Nav","components_LoggedIn","components_LoggedOut","App","getUserUID","guildInfo","renderCards","guilds","id","map","components_Guilds","key","CardDeck","components_Directory","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37c0e1b2.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst config = {\r\n\tapiKey: \"AIzaSyCfRNMojIm31NBzNqvRpyrtgXBV4l3NpLM\",\r\n\tauthDomain: \"guild-recruit.firebaseapp.com\",\r\n\tdatabaseURL: \"https://guild-recruit.firebaseio.com\",\r\n\tprojectId: \"guild-recruit\",\r\n\tstorageBucket: \"guild-recruit.appspot.com\",\r\n\tmessagingSenderId: \"39854529631\",\r\n\tappId: \"1:39854529631:web:84a8510aaaa11a1f\"\r\n};\r\nfirebase.initializeApp(config);\r\nfirebase.database()\r\n\r\nexport default firebase","import React from 'react'\r\nimport Fire from './Fire'\r\nimport {\r\n  Card,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Col } from 'reactstrap'\r\n\r\nclass Guilds extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.checkUserLoggedIn = this.checkUserLoggedIn.bind(this)\r\n\r\n    this.state = {\r\n      userLoggedIn: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.checkUserLoggedIn()\r\n  }\r\n\r\n  checkUserLoggedIn() {\r\n    Fire.auth().onAuthStateChanged( user => {\r\n      if(user) {\r\n        this.setState({ userLoggedIn: true })\r\n      } else {\r\n        this.setState({ userLoggedIn: false })\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Col sm=\"4\">\r\n        <Card body inverse className=\"the-boxes\" style={{ backgroundColor: '#333', borderColor: '#FFF' }}>\r\n          <CardBody className=\"guild-box\">\r\n            <CardTitle className={this.props.guildFaction}>{this.props.guildName}</CardTitle>\r\n            <CardSubtitle className=\"ras text-muted\">{this.props.guildRegion}</CardSubtitle>\r\n            <CardSubtitle className=\"ras text-muted\">{this.props.guildServer}</CardSubtitle>\r\n            <hr className=\"hr-divider\" />\r\n            <CardText>{this.props.guildDesc}</CardText>\r\n            {this.state.userLoggedIn\r\n            ? [<Button>Apply</Button>,<Button className=\"btn-spacing\">Contact</Button>]\r\n            : \" \" }\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Guilds\r\n","import React from 'react'\r\nimport Fire from './Fire'\r\nimport {\r\n  Badge,\r\n  Button,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Form,\r\n  FormGroup,\r\n  FormText,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupButtonDropdown,\r\n  InputGroupText,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  NavLink,\r\n  NavItem,\r\n  UncontrolledDropdown\r\n} from 'reactstrap'\r\n\r\nclass LoggedIn extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.logout = this.logout.bind(this)\r\n    this.toggleProfile = this.toggleProfile.bind(this)\r\n    this.updateUsername = this.updateUsername.bind(this)\r\n    this.setUserProfile = this.setUserProfile.bind(this)\r\n    this.deleteUserProfile = this.deleteUserProfile.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.getUserInfo = this.getUserInfo.bind(this)\r\n    this.getUserEmail = this.getUserEmail.bind(this)\r\n    this.toggleAddGuild = this.toggleAddGuild.bind(this)\r\n    this.toggleManageGuild = this.toggleManageGuild.bind(this)\r\n    this.toggleDeleteModal = this.toggleDeleteModal.bind(this)\r\n    this.addGuildToDB = this.addGuildToDB.bind(this)\r\n    this.toggleRegionSelect = this.toggleRegionSelect.bind(this)\r\n    this.toggleFactionSelect = this.toggleFactionSelect.bind(this)\r\n    this.setEditDisabled = this.setEditDisabled.bind(this)\r\n    this.setRegionEU = this.setRegionEU.bind(this)\r\n    this.setRegionUS = this.setRegionUS.bind(this)\r\n    this.setFactionA = this.setFactionA.bind(this)\r\n    this.setFactionH = this.setFactionH.bind(this)\r\n    this.checkGuildData = this.checkGuildData.bind(this)\r\n    this.ucFirst = this.ucFirst.bind(this)\r\n    this.getGuildInfo = this.getGuildInfo.bind(this)\r\n\r\n    this.state = {\r\n      profileModal: false,\r\n      addGuildModal: false,\r\n      manageGuildModal: false,\r\n      deleteModal: false,\r\n      editDisabled: true,\r\n      profileUsername: '',\r\n      profileEmail: '',\r\n      profileDiscord: '',\r\n      profileUid: '',\r\n      guildName: '',\r\n      guildNameError: '',\r\n      guildRegion: '',\r\n      guildRegionError: '',\r\n      guildServer: '',\r\n      guildServerError: '',\r\n      guildDesc: '',\r\n      guildDescError: '',\r\n      guildFaction: '',\r\n      guildFactionError: '',\r\n      factionColor: 'secondary',\r\n      regionSelect: false,\r\n      factionSelect: false,\r\n      userHasGuild: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserEmail()\r\n  }\r\n\r\n  logout() {\r\n    Fire.auth().signOut();\r\n  }\r\n\r\n  updateUsername(value) {\r\n    this.setState({ profileUsername: value })\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  ucFirst(s) {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1);\r\n  }\r\n\r\n  setRegionEU() {\r\n    this.setState({ guildRegion: 'EU'})\r\n  }\r\n\r\n  setRegionUS() {\r\n    this.setState({ guildRegion: 'US' })\r\n  }\r\n\r\n  setFactionA() {\r\n    this.setState({ guildFaction: 'Alliance' })\r\n    this.setState({ factionColor: 'primary' })\r\n  }\r\n\r\n  setFactionH() {\r\n    this.setState({ guildFaction: 'Horde' })\r\n    this.setState({ factionColor: 'danger' })\r\n  }\r\n\r\n  setEditDisabled() {\r\n    this.setState(prevState => ({\r\n      editDisabled: !prevState.editDisabled\r\n    }))\r\n  }\r\n\r\n  toggleProfile() {\r\n    this.setState(prevState => ({\r\n      profileModal: !prevState.profileModal\r\n    }))\r\n  }\r\n\r\n  toggleAddGuild() {\r\n    this.setState(prevState => ({\r\n      addGuildModal: !prevState.addGuildModal\r\n    }))\r\n  }\r\n\r\n  toggleManageGuild() {\r\n    this.setState(prevState => ({\r\n      manageGuildModal: !prevState.manageGuildModal\r\n    }))\r\n  }\r\n\r\n  toggleDeleteModal() {\r\n    this.setState(prevState => ({\r\n      deleteModal: !prevState.deleteModal\r\n    }))\r\n  }\r\n\r\n  toggleRegionSelect() {\r\n     this.setState(prevState => ({\r\n      regionSelect: !prevState.regionSelect\r\n    }))\r\n  }\r\n\r\n  toggleFactionSelect() {\r\n    this.setState(prevState => ({\r\n      factionSelect: !prevState.factionSelect\r\n    }))\r\n  }\r\n\r\n  checkGuildData() {\r\n    this.setState({\r\n      guildDescError: '',\r\n      guildNameError: '',\r\n      guildRegionError: '',\r\n      guildServerError: '',\r\n      guildFactionError: '',\r\n      successfulGuildLog: false\r\n    })\r\n\r\n    if (!this.state.guildName) {\r\n      this.setState({ guildNameError: 'Guild Name is empty!'})\r\n    } else if(!this.state.guildRegion) {\r\n      this.setState({ guildRegionError: 'Region isn\\'t chosen!'})\r\n    } else if(!this.state.guildFaction) {\r\n      this.setState({ guildFactionError: 'Faction isn\\'t chosen!'})\r\n    } else if(!this.state.guildServer) {\r\n      this.setState({ guildServerError: 'Server is blank!' })\r\n    } else if(!this.state.guildDesc) {\r\n      this.setState({ guildDescError: 'Description is blank!' })\r\n    } else if (this.state.guildName.length < 3 || this.state.guildName.length > 24) {\r\n      this.setState({ guildNameError: 'Error in Guild Name length!'})\r\n    } else if(this.state.guildDesc.length > 140) {\r\n      this.setState({ guildDescError: 'Description is too long!'})\r\n    } else if(this.state.guildDesc.length < 10) {\r\n      this.setState({ guildDescError: 'Description is too short!'})\r\n    } else {\r\n      this.addGuildToDB()\r\n    }\r\n  }\r\n\r\n  getUserEmail() {\r\n    Fire.auth().onAuthStateChanged( user => {\r\n      if(user) {\r\n        const userUid = Fire.auth().currentUser.uid\r\n        this.setState({ profileEmail: user.email })\r\n        this.setState({ profileUid: userUid})\r\n        Fire.firestore().collection('users').doc(this.state.profileUid).get().then(doc => {\r\n          if(doc.exists) {\r\n            var data = JSON.stringify(doc.data())\r\n            var user = JSON.parse(data)\r\n            this.setState({ profileUsername: user.username })\r\n          }\r\n        })\r\n        Fire.firestore().collection('guilds').doc(this.state.profileUid).get().then(doc => {\r\n          if(doc.exists) {\r\n            this.setState({ userHasGuild: true })\r\n          } else (\r\n            console.log(\"No guild exists for this user!\")\r\n          )\r\n        })\r\n      } else if (!user) {\r\n        console.log(\"No user!\")\r\n      }\r\n    })\r\n  }\r\n\r\n  getUserInfo() {\r\n    Fire.firestore().collection('users').doc(this.state.profileUid)\r\n      .get().then(doc => {\r\n        if(doc.exists) {\r\n          var data = JSON.stringify(doc.data())\r\n          var user = JSON.parse(data)\r\n          this.setState({ profileUsername: user.username })\r\n          this.setState({ profileDiscord: user.discord })\r\n        } else {\r\n          console.log(\"No such document\")\r\n        }\r\n      }).catch((err) => {\r\n        console.log(\"Error getting document from DB: \", err)\r\n      })\r\n  }\r\n\r\n  getGuildInfo() {\r\n    Fire.firestore().collection('guilds').doc(this.state.profileUid)\r\n      .get().then(doc => {\r\n        if(doc.exists) {\r\n          var data = JSON.stringify(doc.data())\r\n          var guild = JSON.parse(data)\r\n          this.setState({ \r\n            guildName: guild.guildName,\r\n            guildFaction: guild.guildFaction,\r\n            guildRegion: guild.guildRegion.slice(0, -1),\r\n            guildServer: guild.guildServer,\r\n            guildDesc: guild.guildDesc\r\n           })\r\n        } else { console.log(\"No such document!\") }\r\n      }).catch(err => {\r\n        console.log(\"Error getting info from DB: \", err)\r\n      })\r\n  }\r\n\r\n  setUserProfile() {\r\n    Fire.firestore().collection('users').doc(this.state.profileUid).set({\r\n      username: this.state.profileUsername,\r\n      discord: this.state.profileDiscord,\r\n      email: this.state.profileEmail\r\n    }).then(() => {\r\n      console.log(\"Written to Firestore\")\r\n    }).catch(err => {\r\n      console.log(\"Error writing to DB: \", err)\r\n    })\r\n  }\r\n\r\n  deleteUserProfile() {\r\n    var canDelete = false\r\n    Fire.firestore().collection('users').doc(this.state.profileUid).delete()\r\n      .then(() => {\r\n        console.log(\"Document deleted successfully\")\r\n        canDelete = true;\r\n        if(canDelete) {\r\n          Fire.auth().currentUser.delete().then(() => {\r\n            console.log(\"User deleted successfully\")\r\n          }).catch(err => {\r\n            console.log(\"Error deleting user: \", err)\r\n          })\r\n        }\r\n      }).catch(err => {\r\n        console.log(\"Error deleting document: \", err)\r\n      })\r\n    }\r\n\r\n  addGuildToDB() {\r\n    Fire.firestore().collection('guilds').doc(this.state.profileUid)\r\n    .set({\r\n      guildName: this.state.guildName,\r\n      guildRegion: this.state.guildRegion + \"-\",\r\n      guildServer: this.ucFirst(this.state.guildServer),\r\n      guildDesc: this.ucFirst(this.state.guildDesc),\r\n      guildFaction: this.ucFirst(this.state.guildFaction)\r\n    }).then(() => {\r\n      console.log(\"Successfully written to Firestore\")\r\n      this.toggleAddGuild()\r\n      this.setState({ userHasGuild: true })\r\n    }).catch(err => {\r\n      console.log(\"Error writing to DB: \", err)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <NavItem>\r\n        <NavLink href=\"#\" onClick={() => {this.toggleProfile(); this.getUserInfo()}}> {this.state.profileUsername ? this.state.profileUsername : \"Loading..\"} </NavLink>\r\n        <Modal isOpen={this.state.profileModal} toggle={this.toggleProfile}>\r\n          <ModalBody>\r\n            <Form>\r\n              <FormGroup>\r\n                <Label style={{ color: '#000' }} for=\"username\">Username</Label>\r\n                <Input type=\"username\" name=\"profileUsername\" value={this.state.profileUsername} onChange={this.handleChange} disabled={this.state.editDisabled} />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label style={{ color: '#000' }} for=\"email\">Email</Label>\r\n                <Input type=\"email\" name=\"email\" value={this.state.profileEmail} disabled />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label style={{ color: '#000' }} for=\"discord\">Discord</Label>\r\n                <Input type=\"text\" name=\"profileDiscord\" value={this.state.profileDiscord} onChange={this.handleChange} disabled={this.state.editDisabled} />\r\n                <FormText color=\"muted\">\r\n                  Example: chelk#4281\r\n                </FormText>\r\n              </FormGroup>\r\n              <Button className=\"btn-float-r btn-spacing\" color=\"secondary\" onClick={this.toggleProfile}>Close</Button>\r\n              {this.state.editDisabled \r\n              ? <Button className=\"btn-float-r btn-spacing\" \r\n                        color=\"info\"\r\n                        onClick={this.setEditDisabled}>\r\n                        Edit\r\n                  </Button>\r\n              : <Button className=\"btn-float-r btn-spacing\" \r\n                        color=\"success\"\r\n                        onClick={() => {this.setEditDisabled(); this.setUserProfile(); this.toggleProfile()}}>\r\n                        Update\r\n                </Button>}\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </NavItem>,\r\n      <UncontrolledDropdown nav inNavbar>\r\n        <DropdownToggle nav caret>\r\n          Options\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          {this.state.userHasGuild \r\n          ? <DropdownItem onClick={() => {this.getGuildInfo(); this.toggleManageGuild()}}> Manage Guild </DropdownItem>\r\n          : <DropdownItem onClick={this.toggleAddGuild}>Add Guild</DropdownItem>}\r\n          <Modal isOpen={this.state.manageGuildModal} toggle={this.toggleManageGuild}>\r\n            <ModalBody>\r\n              <Form>\r\n                <FormGroup>\r\n                  <Label style={{ color: '#000' }} for=\"guildName\">Guild Name</Label>\r\n                  <Input className=\"info-font\" type=\"text\" name=\"guildName\" defaultValue={this.state.guildName} disabled />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label style={{ color: '#000' }} for=\" guild\">Guild Server</Label>\r\n                  <InputGroup>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText className=\"info-font\" >{this.state.guildFaction}</InputGroupText>\r\n                      <InputGroupText className=\"info-font\" >{this.state.guildRegion}</InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input className=\"info-font\" type=\"text\" name=\"guildName\" defaultValue={this.state.guildServer} disabled/>\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label style={{ color: '#000' }} for=\"guildDesc\">Guild Description</Label>\r\n                  <Input className=\"info-font\" type=\"textarea\" name=\"guildDesc\" defaultValue={this.state.guildDesc} disabled />\r\n                </FormGroup>\r\n                <Button className=\"btn-float-r btn-spacing\" color=\"secondary\" onClick={this.toggleManageGuild}>Close</Button>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n          <Modal isOpen={this.state.addGuildModal} toggle={this.toggleAddGuild}>\r\n            <ModalBody>\r\n            <Form>\r\n              <FormGroup>\r\n                <Badge color=\"danger\" className=\"badge-spacing visible\">{this.state.guildNameError}</Badge>\r\n                <Input type=\"text\" name=\"guildName\" value={this.state.guildName} onChange={this.handleChange} placeholder=\"Guild Name\" />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Badge color=\"danger\" className=\"badge-spacing visible\">{this.state.guildFactionError}{this.state.guildRegionError}{this.state.guildServerError}</Badge>\r\n                <InputGroup>\r\n                  <InputGroupButtonDropdown addonType=\"append\" isOpen={this.state.factionSelect} toggle={this.toggleFactionSelect}>\r\n                    <DropdownToggle color={this.state.factionColor}>\r\n                      {this.state.guildFaction ? this.state.guildFaction : \"Faction\"}\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                      <DropdownItem onClick={this.setFactionA}>Alliance</DropdownItem>\r\n                      <DropdownItem onClick={this.setFactionH}>Horde</DropdownItem>\r\n                    </DropdownMenu>\r\n                  </InputGroupButtonDropdown>\r\n                  <InputGroupButtonDropdown addonType=\"append\" isOpen={this.state.regionSelect} toggle={this.toggleRegionSelect}>\r\n                    <DropdownToggle>\r\n                      {this.state.guildRegion ? this.state.guildRegion : \"Region\"}\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                      <DropdownItem onClick={this.setRegionEU}>EU</DropdownItem>\r\n                      <DropdownItem onClick={this.setRegionUS}>US</DropdownItem>\r\n                    </DropdownMenu>\r\n                  </InputGroupButtonDropdown>\r\n                  <Input type=\"text\" name=\"guildServer\" value={this.state.guildServer} onChange={this.handleChange} placeholder=\"Server Name\" />\r\n                </InputGroup>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Badge color=\"danger\" className=\"badge-spacing visible\">{this.state.guildDescError}</Badge>\r\n                <Input type=\"textarea\" name=\"guildDesc\" value={this.state.guildDesc} onChange={this.handleChange} placeholder=\"Description\" />\r\n                <FormText color={this.state.guildDesc.length > 140 ? \"danger\" : \"muted\"}>\r\n                  Character count: {this.state.guildDesc.length} / 140\r\n                </FormText>\r\n              </FormGroup>\r\n              <Button className=\"btn-float-r btn-spacing\" color=\"secondary\" onClick={this.toggleAddGuild}>Close</Button>\r\n              <Button className=\"btn-float-r\" color=\"success\" onClick={() => {if (this.state.successfulGuildLog) { this.checkGuildData() } else { this.checkGuildData(); }}}>Add</Button>\r\n            </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n          {this.state.userHasGuild \r\n          ? <DropdownItem> Show Applicants</DropdownItem>\r\n          : <DropdownItem> Show Applications</DropdownItem>}\r\n          <DropdownItem divider />\r\n          <DropdownItem onClick={this.toggleDeleteModal}>\r\n            Delete Account\r\n          </DropdownItem>\r\n          <Modal isOpen={this.state.deleteModal} toggle={this.toggleDeleteModal}>\r\n            <ModalBody>\r\n              <span className=\"delete-font\">\r\n                Are you sure you want to permanently delete your account? Doing so will delete the following:\r\n                <ul className=\"no-dots\">\r\n                  <li> - Guild (If applicable)</li>\r\n                  <li> - Guild applications (If applicable)</li>\r\n                  <li> - Profile</li>\r\n                </ul>\r\n              </span>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"success\" onClick={() => {this.deleteUserProfile(); this.toggleDeleteModal()}}>Delete</Button>\r\n              <Button color=\"danger\" onClick={this.toggleDeleteModal}>Nevermind</Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n          <DropdownItem onClick={this.logout}>\r\n            Log Out\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>]\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoggedIn","import React from 'react'\r\nimport Fire from './Fire'\r\nimport {\r\n  NavItem,\r\n  NavLink,\r\n  Badge,\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  Input,\r\n  FormGroup,\r\n  FormText,\r\n  Form } from 'reactstrap';\r\n\r\nclass LoggedOut extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.login = this.login.bind(this)\r\n    this.signup = this.signup.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.toggleLoginModal = this.toggleLoginModal.bind(this)\r\n    this.toggleRegisterModal = this.toggleRegisterModal.bind(this)\r\n    this.checkPlayerData = this.checkPlayerData.bind(this)\r\n    this.getUsernames = this.getUsernames.bind(this)\r\n\r\n    this.state = {\r\n      loginModal: false,\r\n      registerModal: false,\r\n      dbUsernames: [],\r\n      username: '',\r\n      usernameError: '',\r\n      discord: '',\r\n      discordError: '',\r\n      email: '',\r\n      emailError: '',\r\n      password: '',\r\n      passwordError: '',\r\n      uid: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUsernames()\r\n  }\r\n\r\n  login(e) {\r\n    Fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\r\n      .then((u) => {}).catch((error) => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  signup(e) {\r\n    Fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n      .then(() => {\r\n        const userUid = Fire.auth().currentUser.uid\r\n        this.setState({ uid: userUid })\r\n        Fire.firestore().collection('users').doc(this.state.uid).set({\r\n          username: this.state.username,\r\n          discord: this.state.discord,\r\n          email: this.state.email\r\n        }).then(() => {\r\n          console.log(\"Document successfully written\")\r\n        }).catch((error) => {\r\n          console.log(error);\r\n        })\r\n      })\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  getUsernames() {\r\n    Fire.firestore().collection('users')\r\n      .get().then(snapshot => {\r\n        snapshot.forEach(doc => {\r\n          this.state.dbUsernames.push(doc.data().username)\r\n          console.log(this.state.dbUsernames)\r\n          console.log(this.state.dbUsernames[1])\r\n        })\r\n      })\r\n  }\r\n\r\n  checkPlayerData() {\r\n    this.setState({\r\n      usernameError: '',\r\n      discordError: '',\r\n      emailError: '',\r\n      passwordError: ''\r\n    })\r\n\r\n    if(!this.state.email) {\r\n      this.setState({ emailError: \"Email field is empty!\" })\r\n    } else if(!this.state.password) {\r\n      this.setState({ passwordError: \"Password field is empty!\" })\r\n    } else if(!this.state.username) {\r\n      this.setState({ usernameError: \"Username field is empty!\" })\r\n    } else if(!this.state.discord) {\r\n      this.setState({ discordError: \"Discord field is empty!\" })\r\n    } else if(this.state.username.length > 14) {\r\n      this.setState({ usernameError: \"Username is too long!\" })\r\n    } else if(this.state.username.length < 3) {\r\n      this.setState({ usernameError: \"Username is too short!\" })\r\n    } else if(this.state.username.length > 3 && this.state.username.length < 14) {\r\n      \r\n    } else {\r\n      this.signup();\r\n      this.toggleRegisterModal();\r\n    }\r\n  }\r\n\r\n  toggleLoginModal() {\r\n    this.setState(prevState => ({\r\n      loginModal: !prevState.loginModal\r\n    }))\r\n  }\r\n\r\n  toggleRegisterModal() {\r\n    this.setState(prevState => ({\r\n      registerModal: !prevState.registerModal\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return([\r\n      <NavItem>\r\n        <NavLink href=\"#\" onClick={this.toggleRegisterModal}> Register </NavLink>\r\n        <Modal isOpen={this.state.registerModal} toggle={this.toggleRegisterModal}>\r\n          <ModalBody>\r\n            <Form>\r\n              <FormGroup>\r\n                <Badge color=\"danger\" className=\"badge-spacing\">{this.state.emailError}</Badge>\r\n                <Input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder=\"Email\" />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Badge color=\"danger\" className=\"badge-spacing\">{this.state.passwordError}</Badge>\r\n                <Input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} placeholder=\"Password\" />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Badge color=\"danger\" className=\"badge-spacing\">{this.state.usernameError}</Badge>\r\n                <Input type=\"username\" name=\"username\" value={this.state.username} onChange={this.handleChange} placeholder=\"Username\" />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Badge color=\"danger\" className=\"badge-spacing\">{this.state.discordError}</Badge>\r\n                <Input type=\"text\" name=\"discord\" value={this.state.discord} onChange={this.handleChange} placeholder=\"Discord\" />\r\n                <FormText color=\"muted\">\r\n                  Example: chelk#4281\r\n                </FormText>\r\n              </FormGroup>\r\n            </Form>\r\n            <Button className=\"btn-float-r btn-spacing\" color=\"danger\" onClick={this.toggleRegisterModal}>Close</Button>\r\n            <Button className=\"btn-float-r\" color=\"success\" onClick={() => {\r\n              this.checkPlayerData();\r\n            }}> Register </Button>\r\n          </ModalBody>\r\n        </Modal>\r\n      </NavItem>,\r\n      <NavItem>\r\n        <NavLink href=\"#\" onClick={this.toggleLoginModal}> Login </NavLink>\r\n        <Modal isOpen={this.state.loginModal} toggle={this.toggleLoginModal}>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder=\"Email\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} placeholder=\"Password\" />\r\n            </FormGroup>\r\n          </Form>\r\n          <Button className=\"btn-float-r btn-spacing\" color=\"danger\" onClick={this.toggleLoginModal}>Close</Button>\r\n          <Button className=\"btn-float-r\" color=\"success\" onClick={() => {\r\n              this.login();\r\n              this.toggleRegisterModal();\r\n            }}> Log in </Button>\r\n          <p className=\"error-message\" color=\"danger\">{this.props.error}</p>\r\n        </ModalBody>\r\n        </Modal>\r\n      </NavItem>\r\n      ]\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoggedOut","import React from 'react'\r\nimport Fire from './Fire'\r\nimport LoggedIn from './LoggedIn'\r\nimport LoggedOut from './LoggedOut'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  Nav\r\n } from 'reactstrap';\r\n\r\nclass Directory extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.toggleNav = this.toggleNav.bind(this)\r\n    this.authListener = this.authListener.bind(this)\r\n    this.state = {\r\n      isOpen: false,\r\n      user: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.authListener()\r\n  }\r\n\r\n  toggleNav() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    })\r\n  }\r\n\r\n  authListener() {\r\n    Fire.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.setState({ user })\r\n      } else {\r\n        this.setState({ user: null })\r\n      }\r\n  })}\r\n\r\n  render() {\r\n    return (\r\n      <Navbar className=\"main-nav\" color=\"dark\" dark expand=\"md\" sticky=\"top\">\r\n        <NavbarToggler onClick={this.toggleNav} />\r\n        <Collapse isOpen={this.state.isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n          {this.state.user\r\n          ?  <LoggedIn />\r\n          :  <LoggedOut />}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Directory\r\n","import React from 'react'\r\nimport Guilds from './Guilds'\r\nimport Directory from './Directory'\r\nimport Fire from './Fire'\r\nimport { CardDeck } from 'reactstrap'\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.getUserUID = this.getUserUID.bind(this)\r\n    this.guildInfo = this.guildInfo.bind(this)\r\n    this.renderCards = this.renderCards.bind(this)\r\n\r\n    this.state = {\r\n      profileUid: '',\r\n      guilds: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.guildInfo()\r\n    this.getUserUID()\r\n  }\r\n\r\n  getUserUID() {\r\n    Fire.auth().onAuthStateChanged( user => {\r\n      if(user) {\r\n        const userUid = Fire.auth().currentUser.uid\r\n        this.setState({ profileUid: userUid})  \r\n      }\r\n    })\r\n  }\r\n\r\n  guildInfo() {\r\n    Fire.firestore().collection('guilds')\r\n      .get().then(snapshot => {\r\n        snapshot.forEach(doc => {\r\n          this.setState({\r\n            guilds: [{\r\n              id: doc.id,\r\n              guildDesc: doc.data().guildDesc,\r\n              guildFaction: doc.data().guildFaction,\r\n              guildName: doc.data().guildName,\r\n              guildRegion: doc.data().guildRegion,\r\n              guildServer: doc.data().guildServer\r\n            }]\r\n          })\r\n        })\r\n      })\r\n  }\r\n\r\n  renderCards() {\r\n    let guilds = this.state.guilds\r\n    guilds.map(guild => {\r\n      console.log(guild)\r\n      return <Guilds\r\n              key={guild.id}\r\n              guildFaction={guild.guildFaction} \r\n              guildServer={guild.guildServer}\r\n              guildName={guild.guildName} \r\n              guildDesc={guild.guildDesc} />\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const alliance = 'guild-name -alliance'\r\n    const horde = 'guild-name -horde'       \r\n    return(\r\n      <div className=\"main-div\">\r\n        <CardDeck>\r\n          <Guilds guildFaction={alliance} guildServer=\"Sargeras\" guildRegion=\"US-\" guildName=\"HelloQ\" guildDesc=\"This is a test description.\" />\r\n          <Guilds guildFaction={horde} guildServer=\"Sargeras\" guildRegion=\"US-\" guildName=\"HelloQ\" guildDesc=\"This is a test description.\" />\r\n          <Guilds guildFaction={alliance} guildServer=\"Sargeras\" guildRegion=\"US-\" guildName=\"HelloQ\" guildDesc=\"This is a test description.\" />\r\n        </CardDeck>\r\n          <Directory />\r\n        <CardDeck>\r\n          {this.renderCards()}\r\n        </CardDeck>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}